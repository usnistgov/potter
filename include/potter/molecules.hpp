#pragma once

#include "potter.hpp"

/*
Get a fully instantiated class for nitrogen with the site-site potentials from:

Robert Hellmann (2013) Ab initio potential energy surface for the nitrogen
molecule pair and thermophysical properties of nitrogen gas, Molecular Physics, 111:3, 387-401,
DOI: 10.1080/00268976.2012.726379
Link: https://doi.org/10.1080/00268976.2012.726379
*/
auto get_nitrogen() {

    //X,Y,Z coordinates, in Angstrom
    std::vector<std::vector<double>> coords0 = {
        {-0.680065710389, 0, 0},
        {-0.447763006688, 0, 0},
        {0.000000000000, 0, 0},
        {0.447763006688, 0, 0},
        {0.680065710389, 0, 0}
    };
    Molecule<double> m0(coords0);
    std::vector<double> qs = { -832.77884541, 1601.24507755, -1536.93246428, 1601.24507755, -832.77884541 };
    std::vector<char> types = { 'A','B','C','B','A' };
    std::map<std::tuple<char, char>, std::tuple<double, double, double, double>> coeffs = {
        {{'A','A'}, { 0.973347918383e7, 3.06144571072, 2.58031350518,  0.298807116692e7}},
        {{'A','B'}, {-0.954555977809e7, 2.58710992361, 3.45760438302, -0.608284467163e7}},
        {{'A','C'}, { 0.122158259267e8, 2.96686681629, 2.46746232590,  0.490318811890e7}},
        {{'B','B'}, { 0.299460243665e7, 2.15319940621, 2.42577961527,  0.146889670654e8}},
        {{'B','C'}, {-0.819908034347e7, 2.84661195657, 2.02508542307, -0.129841807274e8}},
        {{'C','C'}, { 0.163947777734e8, 2.99548316813, 1.97117981681,  0.107874613877e8}}
    };

    // Connect up the lambda functions for site-site interactions
    Integrator<double> integr({m0, m0});
    for (auto i = 0; i < 5; ++i) {
        auto chari = types[i];
        auto q_i = qs[i];
        for (auto j = 0; j < 5; ++j) {
            auto charj = types[j];
            auto q_j = qs[j];

            // Collect the coefficients for the given i,j pair
            auto typetup = std::make_tuple(std::min(chari, charj), std::max(chari, charj));
            double A_ij, alpha_ij, b_ij, C6_ij;
            std::tie(A_ij, alpha_ij, b_ij, C6_ij) = coeffs[typetup];

            // Pre-calculate some things so they need not be calculated in the potential function
            Eigen::ArrayXi ks = Eigen::ArrayXi::LinSpaced(7, 0, 6); // 0,...,6
            Eigen::ArrayXd factorialks = ks.unaryExpr([](const int n) {return factorial(n); }); // k!

            // The lambda function that will be used to evaluate the site-site interaction
            // The captures are captured by copy, and "baked" into the lambda
            auto ff = [q_i, q_j, A_ij, alpha_ij, b_ij, C6_ij, ks, factorialks](double R_ij) -> double {
                Eigen::ArrayXd rbk(ks.size());
                for (auto i = 0; i < 7; ++i) {
                    rbk(i) = pow(R_ij * b_ij, i) / factorialks(i);
                }
                double f6_ij = 1.0 - exp(-R_ij * b_ij) * rbk.sum();
                double val = A_ij * exp(-alpha_ij * R_ij) - f6_ij * C6_ij / pow(R_ij, 6) + q_i * q_j / R_ij;
                return val;
            };
            std::function<double(double)> f(ff);
            integr.get_evaluator().add_potential(i, j, f);
        }
    }
    return integr;
}

auto validdata_nitrogen_potential()
{
    struct val{
        double r_A,theta1_deg,theta2_deg,phi_deg,V12BkB_K;
    };
    std::vector<val> vals = {
        {2.25,90.0,90.0,0.0,12215.631},
        {2.50,90.0,90.0,0.0,4861.528},
        {2.75,90.0,90.0,0.0,1739.930},
        {3.00,90.0,90.0,0.0,493.061},
        {3.25,90.0,90.0,0.0,40.447},
        {3.50,90.0,90.0,0.0,-94.613},
        {3.75,90.0,90.0,0.0,-113.486},
        {4.00,90.0,90.0,0.0,-96.597},
        {4.25,90.0,90.0,0.0,-73.473},
        {4.50,90.0,90.0,0.0,-53.368},
        {4.75,90.0,90.0,0.0,-38.091},
        {5.00,90.0,90.0,0.0,-27.097},
        {5.50,90.0,90.0,0.0,-13.924},
        {6.00,90.0,90.0,0.0,-7.406},
        {7.00,90.0,90.0,0.0,-2.333},
        {8.00,90.0,90.0,0.0,-0.835},
        {2.25,90.0,90.0,45.0,11663.024},
        {2.50,90.0,90.0,45.0,4643.610},
        {2.75,90.0,90.0,45.0,1650.877},
        {3.00,90.0,90.0,45.0,453.478},
        {3.25,90.0,90.0,45.0,20.214},
        {3.50,90.0,90.0,45.0,-106.805},
        {3.75,90.0,90.0,45.0,-121.906},
        {4.00,90.0,90.0,45.0,-102.922},
        {4.25,90.0,90.0,45.0,-78.431},
        {4.50,90.0,90.0,45.0,-57.333},
        {4.75,90.0,90.0,45.0,-41.294},
        {5.00,90.0,90.0,45.0,-29.701},
        {5.50,90.0,90.0,45.0,-15.674},
        {6.00,90.0,90.0,45.0,-8.607},
        {7.00,90.0,90.0,45.0,-2.935},
        {8.00,90.0,90.0,45.0,-1.160},
        {2.25,90.0,90.0,90.0,11201.298},
        {2.50,90.0,90.0,90.0,4457.812},
        {2.75,90.0,90.0,90.0,1573.940},
        {3.00,90.0,90.0,90.0,418.826},
        {3.25,90.0,90.0,90.0,2.163},
        {3.50,90.0,90.0,90.0,-117.947},
        {3.75,90.0,90.0,90.0,-129.779},
        {4.00,90.0,90.0,90.0,-108.942},
        {4.25,90.0,90.0,90.0,-83.210},
        {4.50,90.0,90.0,90.0,-61.188},
        {4.75,90.0,90.0,90.0,-44.427},
        {5.00,90.0,90.0,90.0,-32.260},
        {5.50,90.0,90.0,90.0,-17.403},
        {6.00,90.0,90.0,90.0,-9.798},
        {7.00,90.0,90.0,90.0,-3.534},
        {8.00,90.0,90.0,90.0,-1.484},
        {2.25,90.0,45.0,0.0,27964.254},
        {2.50,90.0,45.0,0.0,11993.095},
        {2.75,90.0,45.0,0.0,4796.501},
        {3.00,90.0,45.0,0.0,1713.451},
        {3.25,90.0,45.0,0.0,474.831},
        {3.50,90.0,45.0,0.0,24.379},
        {3.75,90.0,45.0,0.0,-109.090},
        {4.00,90.0,45.0,0.0,-126.219},
        {4.25,90.0,45.0,0.0,-107.604},
        {4.50,90.0,45.0,0.0,-82.936},
        {4.75,90.0,45.0,0.0,-61.513},
        {5.00,90.0,45.0,0.0,-45.126},
        {5.50,90.0,45.0,0.0,-24.635},
        {6.00,90.0,45.0,0.0,-14.072},
        {7.00,90.0,45.0,0.0,-5.267},
        {8.00,90.0,45.0,0.0,-2.280},
        {2.25,90.0,45.0,45.0,26575.834},
        {2.50,90.0,45.0,45.0,11446.692},
        {2.75,90.0,45.0,45.0,4580.074},
        {3.00,90.0,45.0,45.0,1625.066},
        {3.25,90.0,45.0,45.0,436.273},
        {3.50,90.0,45.0,45.0,5.631},
        {3.75,90.0,45.0,45.0,-119.545},
        {4.00,90.0,45.0,45.0,-132.865},
        {4.25,90.0,45.0,45.0,-112.256},
        {4.50,90.0,45.0,45.0,-86.390},
        {4.75,90.0,45.0,45.0,-64.164},
        {5.00,90.0,45.0,45.0,-47.199},
        {5.50,90.0,45.0,45.0,-25.945},
        {6.00,90.0,45.0,45.0,-14.927},
        {7.00,90.0,45.0,45.0,-5.662},
        {8.00,90.0,45.0,45.0,-2.482},
        {2.25,90.0,45.0,90.0,25345.669},
        {2.50,90.0,45.0,90.0,10948.870},
        {2.75,90.0,45.0,90.0,4379.452},
        {3.00,90.0,45.0,90.0,1542.167},
        {3.25,90.0,45.0,90.0,399.765},
        {3.50,90.0,45.0,90.0,-12.286},
        {3.75,90.0,45.0,90.0,-129.634},
        {4.00,90.0,45.0,90.0,-139.334},
        {4.25,90.0,45.0,90.0,-116.816},
        {4.50,90.0,45.0,90.0,-89.793},
        {4.75,90.0,45.0,90.0,-66.785},
        {5.00,90.0,45.0,90.0,-49.253},
        {5.50,90.0,45.0,90.0,-27.248},
        {6.00,90.0,45.0,90.0,-15.779},
        {7.00,90.0,45.0,90.0,-6.058},
        {8.00,90.0,45.0,90.0,-2.683},
        {2.50,90.0,0.0,0.0,25734.904},
        {2.75,90.0,0.0,0.0,10806.676},
        {3.00,90.0,0.0,0.0,4205.909},
        {3.25,90.0,0.0,0.0,1430.429},
        {3.50,90.0,0.0,0.0,341.211},
        {3.75,90.0,0.0,0.0,-39.703},
        {4.00,90.0,0.0,0.0,-141.751},
        {4.25,90.0,0.0,0.0,-144.860},
        {4.50,90.0,0.0,0.0,-119.877},
        {4.75,90.0,0.0,0.0,-92.103},
        {5.00,90.0,0.0,0.0,-68.942},
        {5.50,90.0,0.0,0.0,-38.571},
        {6.00,90.0,0.0,0.0,-22.505},
        {7.00,90.0,0.0,0.0,-8.823},
        {8.00,90.0,0.0,0.0,-3.987},
        {2.25,45.0,45.0,0.0,40239.866},
        {2.50,45.0,45.0,0.0,18615.332},
        {2.75,45.0,45.0,0.0,8064.272},
        {3.00,45.0,45.0,0.0,3186.314},
        {3.25,45.0,45.0,0.0,1067.015},
        {3.50,45.0,45.0,0.0,218.982},
        {3.75,45.0,45.0,0.0,-77.090},
        {4.00,45.0,45.0,0.0,-151.079},
        {4.25,45.0,45.0,0.0,-145.811},
        {4.50,45.0,45.0,0.0,-118.819},
        {4.75,45.0,45.0,0.0,-90.867},
        {5.00,45.0,45.0,0.0,-67.928},
        {5.50,45.0,45.0,0.0,-37.953},
        {6.00,45.0,45.0,0.0,-22.069},
        {7.00,45.0,45.0,0.0,-8.542},
        {8.00,45.0,45.0,0.0,-3.801},
        {2.25,45.0,45.0,45.0,42311.131},
        {2.50,45.0,45.0,45.0,19726.988},
        {2.75,45.0,45.0,45.0,8602.806},
        {3.00,45.0,45.0,45.0,3432.318},
        {3.25,45.0,45.0,45.0,1175.849},
        {3.50,45.0,45.0,45.0,266.862},
        {3.75,45.0,45.0,45.0,-55.341},
        {4.00,45.0,45.0,45.0,-140.320},
        {4.25,45.0,45.0,45.0,-139.701},
        {4.50,45.0,45.0,45.0,-114.780},
        {4.75,45.0,45.0,45.0,-87.864},
        {5.00,45.0,45.0,45.0,-65.538},
        {5.50,45.0,45.0,45.0,-36.320},
        {6.00,45.0,45.0,45.0,-20.923},
        {7.00,45.0,45.0,45.0,-7.958},
        {8.00,45.0,45.0,45.0,-3.486},
        {2.25,45.0,45.0,90.0,51520.705},
        {2.50,45.0,45.0,90.0,24150.990},
        {2.75,45.0,45.0,90.0,10610.660},
        {3.00,45.0,45.0,90.0,4316.149},
        {3.25,45.0,45.0,90.0,1560.836},
        {3.50,45.0,45.0,90.0,436.808},
        {3.75,45.0,45.0,90.0,23.325},
        {4.00,45.0,45.0,90.0,-100.439},
        {4.25,45.0,45.0,90.0,-116.756},
        {4.50,45.0,45.0,90.0,-99.747},
        {4.75,45.0,45.0,90.0,-76.972},
        {5.00,45.0,45.0,90.0,-57.141},
        {5.50,45.0,45.0,90.0,-30.886},
        {6.00,45.0,45.0,90.0,-17.250},
        {7.00,45.0,45.0,90.0,-6.169},
        {8.00,45.0,45.0,90.0,-2.545},
        {2.25,45.0,45.0,135.0,71477.649},
        {2.50,45.0,45.0,135.0,32573.442},
        {2.75,45.0,45.0,135.0,14133.283},
        {3.00,45.0,45.0,135.0,5790.067},
        {3.25,45.0,45.0,135.0,2185.230},
        {3.50,45.0,45.0,135.0,709.743},
        {3.75,45.0,45.0,135.0,149.988},
        {4.00,45.0,45.0,135.0,-35.892},
        {4.25,45.0,45.0,135.0,-79.760},
        {4.50,45.0,45.0,135.0,-75.936},
        {4.75,45.0,45.0,135.0,-60.189},
        {5.00,45.0,45.0,135.0,-44.579},
        {5.50,45.0,45.0,135.0,-23.163},
        {6.00,45.0,45.0,135.0,-12.218},
        {7.00,45.0,45.0,135.0,-3.825},
        {8.00,45.0,45.0,135.0,-1.343},
        {2.25,45.0,45.0,180.0,85269.890},
        {2.50,45.0,45.0,180.0,37919.781},
        {2.75,45.0,45.0,180.0,16249.456},
        {3.00,45.0,45.0,180.0,6644.330},
        {3.25,45.0,45.0,180.0,2539.149},
        {3.50,45.0,45.0,180.0,862.534},
        {3.75,45.0,45.0,180.0,220.439},
        {4.00,45.0,45.0,180.0,-0.181},
        {4.25,45.0,45.0,180.0,-59.472},
        {4.50,45.0,45.0,180.0,-63.058},
        {4.75,45.0,45.0,180.0,-51.262},
        {5.00,45.0,45.0,180.0,-38.009},
        {5.50,45.0,45.0,180.0,-19.235},
        {6.00,45.0,45.0,180.0,-9.708},
        {7.00,45.0,45.0,180.0,-2.684},
        {8.00,45.0,45.0,180.0,-0.767},
        {2.50,45.0,0.0,0.0,55899.919},
        {2.75,45.0,0.0,0.0,25334.967},
        {3.00,45.0,0.0,0.0,10879.491},
        {3.25,45.0,0.0,0.0,4377.264},
        {3.50,45.0,0.0,0.0,1595.243},
        {3.75,45.0,0.0,0.0,474.751},
        {4.00,45.0,0.0,0.0,62.039},
        {4.25,45.0,0.0,0.0,-65.999},
        {4.50,45.0,0.0,0.0,-88.724},
        {4.75,45.0,0.0,0.0,-78.060},
        {5.00,45.0,0.0,0.0,-60.622},
        {5.50,45.0,0.0,0.0,-32.825},
        {6.00,45.0,0.0,0.0,-17.716},
        {7.00,45.0,0.0,0.0,-5.869},
        {8.00,45.0,0.0,0.0,-2.239},
        {2.75,0.0,0.0,0.0,64308.023},
        {3.00,0.0,0.0,0.0,27972.973},
        {3.25,0.0,0.0,0.0,11792.235},
        {3.50,0.0,0.0,0.0,4773.270},
        {3.75,0.0,0.0,0.0,1822.138},
        {4.00,0.0,0.0,0.0,630.187},
        {4.25,0.0,0.0,0.0,175.616},
        {4.50,0.0,0.0,0.0,17.984},
        {4.75,0.0,0.0,0.0,-26.684},
        {5.00,0.0,0.0,0.0,-32.198},
        {5.50,0.0,0.0,0.0,-19.321},
        {6.00,0.0,0.0,0.0,-8.986},
        {7.00,0.0,0.0,0.0,-1.565},
        {8.00,0.0,0.0,0.0,0.033},
        {2.25,67.5,67.5,22.5,16767.421},
        {2.50,67.5,67.5,22.5,6984.545},
        {2.75,67.5,67.5,22.5,2652.818},
        {3.00,67.5,67.5,22.5,841.463},
        {3.25,67.5,67.5,22.5,143.936},
        {3.50,67.5,67.5,22.5,-87.431},
        {3.75,67.5,67.5,22.5,-138.012},
        {4.00,67.5,67.5,22.5,-127.102},
        {4.25,67.5,67.5,22.5,-101.094},
        {4.50,67.5,67.5,22.5,-75.987},
        {4.75,67.5,67.5,22.5,-55.962},
        {5.00,67.5,67.5,22.5,-41.098},
        {5.50,67.5,67.5,22.5,-22.667},
        {6.00,67.5,67.5,22.5,-13.088},
        {7.00,67.5,67.5,22.5,-4.983},
        {8.00,67.5,67.5,22.5,-2.194},
        {2.25,67.5,67.5,67.5,16823.817},
        {2.50,67.5,67.5,67.5,7069.614},
        {2.75,67.5,67.5,67.5,2703.882},
        {3.00,67.5,67.5,67.5,863.229},
        {3.25,67.5,67.5,67.5,149.753},
        {3.50,67.5,67.5,67.5,-88.387},
        {3.75,67.5,67.5,67.5,-141.054},
        {4.00,67.5,67.5,67.5,-130.262},
        {4.25,67.5,67.5,67.5,-103.728},
        {4.50,67.5,67.5,67.5,-78.001},
        {4.75,67.5,67.5,67.5,-57.445},
        {5.00,67.5,67.5,67.5,-42.175},
        {5.50,67.5,67.5,67.5,-23.236},
        {6.00,67.5,67.5,67.5,-13.398},
        {7.00,67.5,67.5,67.5,-5.084},
        {8.00,67.5,67.5,67.5,-2.230},
        {2.25,67.5,67.5,112.5,18854.877},
        {2.50,67.5,67.5,112.5,8003.392},
        {2.75,67.5,67.5,112.5,3114.683},
        {3.00,67.5,67.5,112.5,1039.627},
        {3.25,67.5,67.5,112.5,225.608},
        {3.50,67.5,67.5,112.5,-54.308},
        {3.75,67.5,67.5,112.5,-124.049},
        {4.00,67.5,67.5,112.5,-120.321},
        {4.25,67.5,67.5,112.5,-96.915},
        {4.50,67.5,67.5,112.5,-72.789},
        {4.75,67.5,67.5,112.5,-53.227},
        {5.00,67.5,67.5,112.5,-38.681},
        {5.50,67.5,67.5,112.5,-20.792},
        {6.00,67.5,67.5,112.5,-11.673},
        {7.00,67.5,67.5,112.5,-4.194},
        {8.00,67.5,67.5,112.5,-1.743},
        {2.25,67.5,67.5,157.5,23064.371},
        {2.50,67.5,67.5,157.5,9733.634},
        {2.75,67.5,67.5,157.5,3826.963},
        {3.00,67.5,67.5,157.5,1337.740},
        {3.25,67.5,67.5,157.5,355.833},
        {3.50,67.5,67.5,157.5,7.405},
        {3.75,67.5,67.5,157.5,-91.048},
        {4.00,67.5,67.5,157.5,-100.102},
        {4.25,67.5,67.5,157.5,-83.009},
        {4.50,67.5,67.5,157.5,-62.457},
        {4.75,67.5,67.5,157.5,-45.203},
        {5.00,67.5,67.5,157.5,-32.299},
        {5.50,67.5,67.5,157.5,-16.608},
        {6.00,67.5,67.5,157.5,-8.849},
        {7.00,67.5,67.5,157.5,-2.815},
        {8.00,67.5,67.5,157.5,-1.012},
        {2.25,67.5,22.5,22.5,49172.883},
        {2.50,67.5,22.5,22.5,22226.474},
        {2.75,67.5,22.5,22.5,9473.072},
        {3.00,67.5,22.5,22.5,3716.615},
        {3.25,67.5,22.5,22.5,1258.655},
        {3.50,67.5,22.5,22.5,284.673},
        {3.75,67.5,22.5,22.5,-56.273},
        {4.00,67.5,22.5,22.5,-145.351},
        {4.25,67.5,22.5,22.5,-144.719},
        {4.50,67.5,22.5,22.5,-118.927},
        {4.75,67.5,22.5,22.5,-91.160},
        {5.00,67.5,22.5,22.5,-68.168},
        {5.50,67.5,22.5,22.5,-38.071},
        {6.00,67.5,22.5,22.5,-22.150},
        {7.00,67.5,22.5,22.5,-8.611},
        {8.00,67.5,22.5,22.5,-3.855},
        {2.25,67.5,22.5,67.5,51544.668},
        {2.50,67.5,22.5,67.5,23444.863},
        {2.75,67.5,22.5,67.5,10045.545},
        {3.00,67.5,22.5,67.5,3972.509},
        {3.25,67.5,22.5,67.5,1370.221},
        {3.50,67.5,22.5,67.5,333.388},
        {3.75,67.5,22.5,67.5,-34.132},
        {4.00,67.5,22.5,67.5,-134.301},
        {4.25,67.5,22.5,67.5,-138.364},
        {4.50,67.5,22.5,67.5,-114.687},
        {4.75,67.5,22.5,67.5,-87.999},
        {5.00,67.5,22.5,67.5,-65.658},
        {5.50,67.5,22.5,67.5,-36.373},
        {6.00,67.5,22.5,67.5,-20.970},
        {7.00,67.5,22.5,67.5,-8.018},
        {8.00,67.5,22.5,67.5,-3.538},
        {2.25,67.5,22.5,112.5,57658.031},
        {2.50,67.5,22.5,112.5,26270.837},
        {2.75,67.5,22.5,112.5,11291.501},
        {3.00,67.5,22.5,112.5,4509.187},
        {3.25,67.5,22.5,112.5,1600.474},
        {3.50,67.5,22.5,112.5,434.237},
        {3.75,67.5,22.5,112.5,12.613},
        {4.00,67.5,22.5,112.5,-110.343},
        {4.25,67.5,22.5,112.5,-124.352},
        {4.50,67.5,22.5,112.5,-105.369},
        {4.75,67.5,22.5,112.5,-81.189},
        {5.00,67.5,22.5,112.5,-60.392},
        {5.50,67.5,22.5,112.5,-32.975},
        {6.00,67.5,22.5,112.5,-18.687},
        {7.00,67.5,22.5,112.5,-6.918},
        {8.00,67.5,22.5,112.5,-2.963},
        {2.25,67.5,22.5,157.5,64938.441},
        {2.50,67.5,22.5,157.5,29365.928},
        {2.75,67.5,22.5,157.5,12585.650},
        {3.00,67.5,22.5,157.5,5048.579},
        {3.25,67.5,22.5,157.5,1827.868},
        {3.50,67.5,22.5,157.5,533.364},
        {3.75,67.5,22.5,157.5,58.774},
        {4.00,67.5,22.5,157.5,-86.512},
        {4.25,67.5,22.5,157.5,-110.398},
        {4.50,67.5,22.5,157.5,-96.171},
        {4.75,67.5,22.5,157.5,-74.571},
        {5.00,67.5,22.5,157.5,-55.363},
        {5.50,67.5,22.5,157.5,-29.830},
        {6.00,67.5,22.5,157.5,-16.622},
        {7.00,67.5,22.5,157.5,-5.951},
        {8.00,67.5,22.5,157.5,-2.468},
        {2.50,22.5,22.5,22.5,69359.815},
        {2.75,22.5,22.5,22.5,32222.926},
        {3.00,22.5,22.5,22.5,14188.272},
        {3.25,22.5,22.5,22.5,5891.325},
        {3.50,22.5,22.5,22.5,2258.127},
        {3.75,22.5,22.5,22.5,751.743},
        {4.00,22.5,22.5,22.5,171.397},
        {4.25,22.5,22.5,22.5,-26.134},
        {4.50,22.5,22.5,22.5,-76.021},
        {4.75,22.5,22.5,22.5,-75.092},
        {5.00,22.5,22.5,22.5,-60.633},
        {5.50,22.5,22.5,22.5,-33.297},
        {6.00,22.5,22.5,22.5,-17.726},
        {7.00,22.5,22.5,22.5,-5.615},
        {8.00,22.5,22.5,22.5,-2.028},
        {2.50,22.5,22.5,67.5,76592.870},
        {2.75,22.5,22.5,67.5,35208.088},
        {3.00,22.5,22.5,67.5,15422.904},
        {3.25,22.5,22.5,67.5,6407.068},
        {3.50,22.5,22.5,67.5,2478.125},
        {3.75,22.5,22.5,67.5,849.260},
        {4.00,22.5,22.5,67.5,217.449},
        {4.25,22.5,22.5,67.5,-2.323},
        {4.50,22.5,22.5,67.5,-62.303},
        {4.75,22.5,22.5,67.5,-66.316},
        {5.00,22.5,22.5,67.5,-54.528},
        {5.50,22.5,22.5,67.5,-29.857},
        {6.00,22.5,22.5,67.5,-15.585},
        {7.00,22.5,22.5,67.5,-4.671},
        {8.00,22.5,22.5,67.5,-1.561},
        {2.50,22.5,22.5,112.5,89093.005},
        {2.75,22.5,22.5,112.5,40186.365},
        {3.00,22.5,22.5,112.5,17435.375},
        {3.25,22.5,22.5,112.5,7235.283},
        {3.50,22.5,22.5,112.5,2828.024},
        {3.75,22.5,22.5,112.5,1003.419},
        {4.00,22.5,22.5,112.5,289.952},
        {4.25,22.5,22.5,112.5,35.023},
        {4.50,22.5,22.5,112.5,-40.893},
        {4.75,22.5,22.5,112.5,-52.703},
        {5.00,22.5,22.5,112.5,-45.122},
        {5.50,22.5,22.5,112.5,-24.621},
        {6.00,22.5,22.5,112.5,-12.356},
        {7.00,22.5,22.5,112.5,-3.263},
        {8.00,22.5,22.5,112.5,-0.870},
        {2.50,22.5,22.5,157.5,99875.303},
        {2.75,22.5,22.5,157.5,44329.051},
        {3.00,22.5,22.5,157.5,19072.034},
        {3.25,22.5,22.5,157.5,7898.749},
        {3.50,22.5,22.5,157.5,3105.561},
        {3.75,22.5,22.5,157.5,1124.911},
        {4.00,22.5,22.5,157.5,346.833},
        {4.25,22.5,22.5,157.5,64.200},
        {4.50,22.5,22.5,157.5,-24.248},
        {4.75,22.5,22.5,157.5,-42.183},
        {5.00,22.5,22.5,157.5,-37.901},
        {5.50,22.5,22.5,157.5,-20.648},
        {6.00,22.5,22.5,157.5,-9.927},
        {7.00,22.5,22.5,157.5,-2.216},
        {8.00,22.5,22.5,157.5,-0.359}
    };
    return vals;
};

auto get_rigidLJChain(int N, double r_site_site) {
    std::vector<std::vector<double>> coords0;

    // Sites of the chain are laid out along the x axis, with the COM at the origin
    for (auto x : r_site_site*(Eigen::ArrayXd::LinSpaced(N, 0, N - 1) - (N - 1) / 2.0)) {
        coords0.push_back({ x, 0, 0 });
    }
    Molecule<double> molA(coords0), molB(coords0);
    Integrator<double> i({molA, molB});

    auto& conf = i.get_conf_view();
    conf["feval_max"] = 1e7;

    auto ff = [](double r) {
        double rn6 = 1 / (r * r * r * r * r * r); return 4.0 * (rn6 * rn6 - rn6);
    };
    std::function<double(double)> f(ff);
    i.get_evaluator().connect_potentials(f, N);
    return i;
}

auto get_rigidMieChain(int N, double N_exp, double r_site_site, int sys_size) {
    std::vector<std::vector<double>> coords0;

    // Sites of the chain are laid out along the x axis, with the COM at the origin
    for (auto x : r_site_site*(Eigen::ArrayXd::LinSpaced(N, 0, N - 1) - (N - 1) / 2.0)) {
        coords0.push_back({ x, 0, 0 });
    }

    std::vector<Molecule<double>> mol_sys;
    for (size_t i = 0; i < sys_size; i++)
    {
        Molecule<double> mol(coords0);
        mol_sys.push_back(mol);
    }

    Integrator<double> i(mol_sys);
    double factor = N_exp / (N_exp - 6) * pow(N_exp / 6, 6 / (N_exp - 6));
    auto ff = [N_exp, factor](double r) {
        double rnN = 1 / pow(r,N_exp); 
        double rn6 = 1 / pow(r,6); 
        return factor * (rnN - rn6);
    };
    std::function<double(double)> f(ff);
    i.get_evaluator().connect_potentials(f, N);
    return i;
}

namespace GenericModels {

    /// Parameters for the 2-site model with Lennard-Jones site-site interactions and point quadrupole
    struct TwoCLJQArgs {
        double l_sitesite, // Angstrom
            epskBAA, // K
            epskBBB, // K
            sigmaAA, // Angstrom
            sigmaBB, // Angstrom
            Q_DA;    // Debye*Angstrom
    };

    auto get_2CLJQ_integrator(const TwoCLJQArgs& args) {

        const std::vector<char> types = { 'A', 'B' };
        // X,Y,Z coordinates, in Angstrom
        const std::vector<std::vector<double>> coords0 = {
            {-args.l_sitesite/2, 0, 0},
            { args.l_sitesite/2, 0, 0},
        };
        using MolType = Molecule<double>;
        MolType m0(coords0);
        // sigma are in Angstrom, epsilon/kB are in K
        // Unlike interactions are modeled with Lorentz-Berthelot mixing rules (communication with R. Fingerhut & J. Vrabec)
        auto epskBAB = sqrt(args.epskBAA * args.epskBBB);
        auto sigmaAB = (args.sigmaAA + args.sigmaBB) / 2;
        std::map<std::tuple<char, char>, std::tuple<double, double>> coeffs = {
             {{'A','A'}, {args.epskBAA, args.sigmaAA}},
             {{'A','B'}, {epskBAB, sigmaAB}},
             {{'B','A'}, {epskBAB, sigmaAB}},
             {{'B','B'}, {args.epskBBB, args.sigmaBB}},
        };

        // Connect up the lambda functions for site-site interactions
        Integrator<double> integr({m0, m0});
        for (auto i = 0; i < types.size(); ++i) {
            auto chari = types[i];
            for (auto j = 0; j < types.size(); ++j) {
                auto charj = types[j];
                // Collect the coefficients for the given i,j pair
                double epskB_ij, sigma_ij;
                std::tie(epskB_ij, sigma_ij) = coeffs[std::make_tuple(chari, charj)];

                // The lambda function that will be used to evaluate the site-site interaction
                std::function<double(double)> f = [epskB_ij, sigma_ij](double R_ij) -> double {
                    double r6 = pow(sigma_ij / R_ij, 6);
                    double val = 4 * epskB_ij * (r6 * r6 - r6); // returned value in terms of V/kB, in units of K
                    return val;
                };
                integr.get_evaluator().add_potential(i, j, f);
            }
        }
        // Convert quadrupolar moment given in Debye*Angstrom to SI units of C*m^2
        auto Q_Cm2 = 3.33564e-30 / 1e10 * args.Q_DA;
        // Also add the point quadrupolar contribution to the potential
        // See Stoll FPE 2001, Eq. 1
        std::function<double(const MolType&, const MolType&)> g = [Q_Cm2](const MolType& mol1, const MolType& mol2) {
            Eigen::ArrayXd COM1 = (mol1.get_xyz_atom(1) + mol1.get_xyz_atom(0)) / 2;
            Eigen::ArrayXd COM2 = (mol2.get_xyz_atom(1) + mol2.get_xyz_atom(0)) / 2;
            Eigen::Array3d rCOM = COM1 - COM2; ///< Distance vector between center-of-mass of moleccules
            Eigen::Array3d r1 = mol1.get_xyz_atom(1) - mol1.get_xyz_atom(0); ///< Vector along the centerline of molecule 1
            Eigen::Array3d r2 = mol2.get_xyz_atom(1) - mol2.get_xyz_atom(0); ///< Vector along the centerline of molecule 2
            double mag1 = r1.matrix().norm(), mag2 = r2.matrix().norm(), r_ij_A = rCOM.matrix().norm();

            // Reminder: A \dot B = |A||B|cos(theta), where theta is angle between them
            double c_i = rCOM.matrix().dot(r1.matrix()) / (mag1 * r_ij_A); // cosine of angle between centerline of molecule 1 and vector between COM
            double c_j = rCOM.matrix().dot(r2.matrix()) / (mag2 * r_ij_A); // cosine of angle between centerline of molecule 2 and vector between COM
            double c = r1.matrix().dot(r2.matrix()) / (mag1 * mag2); // cosine of angle between centerlines of molecules 2 and 1

            auto r_ij_m = r_ij_A / 1e10; ///< center-of-mass distance, in meters

            // Stoll FPE 2001, Eq. 1, with a dimensionally consistent formulation in Base-SI units
            // Converted from ESU to SI units: https://en.wikibooks.org/wiki/Molecular_Simulation/Quadrupole-Quadrupole_Interactions#Appendix
            constexpr auto epsilon_0 = 8.8541878128e-12, ///< Vacuum permittivity, C^2/m^2/N
                k_B = 1.380649e-23; ///< Boltzmann constant, J/K
            // Used bracket term from mardyn: https://github.com/ls1mardyn/ls1-mardyn/blob/3febfd4635f32df6b931aceed75ce162657b1fe2/src/molecules/potforce.h#L108
            double bracket = c - 5.0 * c_i * c_j; // Not as in in Stoll!
            double potential = 6.0 / 8.0 * Q_Cm2 * Q_Cm2 / (4.0 * M_PI * epsilon_0 * pow(r_ij_m, 5)) * (1.0 - 5.0 * (c_i * c_i + c_j * c_j) - 15.0 * c_i * c_i * c_j * c_j + 2.0 * bracket * bracket);
            return potential / k_B;
        };
        integr.get_evaluator().add_generic_contribution(g);
        return integr;
    }
}