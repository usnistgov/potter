from scipy.special import factorial

def Bn_CO2(n, T):

    def CO2potential(n, T):

        powers = [1, 0,-0.5, -1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11]

        coeff_dict = {
        (2,'classical'): [-0.257176088168E+00, 0.317003916790E+02, 0.645362279298E+02,-0.119816302333E+03, 0.586025683115E+01,-0.154996935556E+02, 0.483954561747E+01,-0.195578082709E+01, 0.338813992864E+00,-0.395510810339E-01, 0.000000000000E+00, 0.000000000000E+00, 0.000000000000E+00, 0.000000000000E+00],
        (2,'QFH'): [-0.270554028144E+00, 0.321430299971E+02, 0.629342071031E+02,-0.117805161359E+03, 0.445364503081E+01,-0.142405771665E+02, 0.417204966672E+01,-0.169100853995E+01, 0.284020210595E+00,-0.333373334073E-01, 0.000000000000E+00, 0.000000000000E+00, 0.000000000000E+00, 0.000000000000E+00],
        (3,'nonadditive, QFH'): [0.786961673437E+02,-0.361449639412E+04, 0.208204530882E+05,-0.287750967768E+05, 0.292935312485E+05,-0.348622101355E+05, 0.356564101351E+05,-0.259238558253E+05, 0.131037397552E+05,-0.439884519191E+04, 0.874608730594E+03,-0.831171382285E+02, 0.000000000000E+00, 0.000000000000E+00],
        (3,'nonadditive, classical'): [ 0.938776526774E+02,-0.428410418826E+04, 0.236781644918E+05,-0.329651963742E+05, 0.341769086011E+05,-0.412363042750E+05, 0.421169276495E+05,-0.306392157807E+05, 0.154880683612E+05,-0.519033104275E+04, 0.103034940218E+04,-0.972595638757E+02, 0.000000000000E+00, 0.000000000000E+00],
        (3,'additive, classical'): [ 0.101388773672E+03,-0.460136514823E+04, 0.249590834645E+05,-0.350592893329E+05, 0.361597746230E+05,-0.440000155147E+05, 0.447363545233E+05,-0.325657527199E+05, 0.164528882157E+05,-0.551973370255E+04, 0.109712085622E+04,-0.103869344903E+03, 0.000000000000E+00, 0.000000000000E+00],
        (4,'additive, classical'): [-0.474412292263E+05, 0.249338784114E+07,-0.116762286084E+08, 0.191488600431E+08,-0.282355650501E+08, 0.474922138466E+08,-0.640327820176E+08, 0.646608711235E+08,-0.473681759497E+08, 0.243807818808E+08,-0.835568172961E+07, 0.171930025944E+07,-0.162906597002E+06, 0.000000000000E+00],
        (4,'nonadditive, classical'): [-0.226462283417E+03, 0.154699242947E+06,-0.103133395542E+07, 0.244387620938E+07,-0.547657003540E+07, 0.119534999525E+08,-0.198492830462E+08, 0.236558466177E+08,-0.198489571688E+08, 0.114588208776E+08,-0.433006336261E+07, 0.970322219270E+06,-0.991930249917E+05, 0.000000000000E+00],
        (4,'additive, classical'): [0.450055371611E+03, 0.100096629773E+06,-0.729877839774E+06, 0.188187643607E+07,-0.444535015075E+07, 0.987876712719E+07,-0.166196085065E+08, 0.199869711030E+08,-0.168849706845E+08, 0.980535824968E+07,-0.372487244916E+07, 0.839155992162E+06,-0.863456173547E+05, 0.000000000000E+00],
        (5,'additive, classical'): [-0.194905974395E+08, 0.110766553918E+10,-0.542250968094E+10, 0.918663312425E+10,-0.146563786794E+11, 0.270125710653E+11,-0.399856237003E+11, 0.444272443921E+11,-0.358679838243E+11, 0.203209823931E+11,-0.764427768520E+10, 0.171511312682E+10,-0.173959120597E+09, 0.000000000000E+00],
        (5,'nonadditive, classical'): [-0.135593478382E+08, 0.769164308427E+09,-0.376256283264E+10, 0.637136678099E+10,-0.101507741745E+11, 0.186852934240E+11,-0.276237616116E+11, 0.306471640817E+11,-0.246969435858E+11, 0.139562385384E+11,-0.523177079612E+10, 0.116809578070E+10,-0.117578925975E+09, 0.000000000000E+00],
        (5,'nonadditive, QFH'): [-0.119693150510E+08, 0.679362356902E+09,-0.332438887872E+10, 0.563181239920E+10,-0.897879372718E+10, 0.165406028080E+11,-0.244741717476E+11, 0.271787184098E+11,-0.219253934322E+11, 0.124048101178E+11,-0.465652863072E+10, 0.104134718337E+10,-0.105019950531E+09, 0.000000000000E+00],
        (6,'additive, classical'): [ 0.238363751757E+10,-0.156635626996E+12, 0.828795374531E+12,-0.152264985640E+13, 0.289390940242E+13,-0.646381338824E+13, 0.118219824659E+14,-0.166101206865E+14, 0.174624677739E+14,-0.134163405048E+14, 0.728514452935E+13,-0.264232209398E+13, 0.573520712455E+12,-0.562803743597E+11],
        (6,'nonadditive, classical'): [ 0.161677314075E+10,-0.104748038710E+12, 0.550278081636E+12,-0.100367148549E+13, 0.188006261564E+13,-0.413814082748E+13, 0.745757301740E+13,-0.103237897722E+14, 0.106926826536E+14,-0.809164054427E+13, 0.432613861267E+13,-0.154394166636E+13, 0.329366387573E+12,-0.317058266900E+11],
        (6,'nonadditive, QFH'): [ 0.719206695619E+09,-0.489539431027E+11, 0.263535722970E+12,-0.492462935792E+12, 0.967711514442E+12,-0.223119018879E+13, 0.420484561375E+13,-0.607529549899E+13, 0.655324089942E+13,-0.515275104859E+13, 0.285557106071E+13,-0.105381165334E+13, 0.231886524062E+12,-0.229649794585E+11],
        (7,'additive, classical'): [ 0.287074057526E+12,-0.198234671978E+14, 0.107633175966E+15,-0.203039315620E+15, 0.407467471347E+15,-0.962763449836E+15, 0.186492708003E+16,-0.277640744040E+16, 0.309168517885E+16,-0.251281989717E+16, 0.144026665458E+16,-0.549570856549E+15, 0.124928778048E+15,-0.127683379513E+14],
        (7,'nonadditive, classical'): [ 0.309550143061E+12,-0.204253105030E+14, 0.108323905746E+15,-0.199493513801E+15, 0.381018713060E+15,-0.855195928399E+15, 0.157086587911E+16,-0.221402759323E+16, 0.233056257934E+16,-0.178806585460E+16, 0.966150487804E+15,-0.347083640062E+15, 0.741823873938E+14,-0.711902551287E+13],
        (7,'nonadditive, QFH'): [ 0.311176019604E+12,-0.204893309646E+14, 0.108542531538E+15,-0.199665404100E+15, 0.380416159106E+15,-0.851593291570E+15, 0.155979007564E+16,-0.219163562282E+16, 0.229929646235E+16,-0.175773259757E+16, 0.946095827107E+15,-0.338482326620E+15, 0.720300581209E+14,-0.688109315109E+13],
        }

        coeffs = coeff_dict[(n, 'nonadditive, QFH' if n > 2 else 'QFH')]
        Tstar = T/500
        return sum([c_i*(Tstar)**p_i for (c_i, p_i) in zip(coeffs, powers)]) # in (cm^3/mol)^(n-1)

    return CO2potential(n, T)/1e6**(n-1)

def CO2_splus(T, rhomolar, *, N):
    splus = 0
    for n in range(2, N+1):
        h = 1e-100
        frakBn = Bn_CO2(n, T) + T*Bn_CO2(n, T+1j*h).imag/h
        splus += frakBn*rhomolar**(n-1)/factorial(n-1)
    return splus

if __name__ == '__main__':
    import CoolProp.CoolProp as CP
    Tc = CP.PropsSI('Tcrit', 'CO2')
    T, rhomolar = 2*Tc, 100
    # vir = CO2_splus(T, rhomolar, N=7)
    
    import numpy as np, matplotlib.pyplot as plt 
    Tvec = np.linspace(250, 1000)
    n = 3
    h = 1e-100
    frakBn = Bn_CO2(n, Tvec) + Tvec*Bn_CO2(n, Tvec+1j*h).imag/h
    plt.plot(Tvec, frakBn)
    plt.show()
    
    print(T)
    SW = -CP.PropsSI('Smolar_residual','T',T,'Dmolar',rhomolar,'CO2')/CP.PropsSI('gas_constant','CO2')
    print(vir, SW, (vir/SW-1)*100)